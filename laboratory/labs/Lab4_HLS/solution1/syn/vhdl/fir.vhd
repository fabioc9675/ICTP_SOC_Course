-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_TVALID : OUT STD_LOGIC;
    y_TREADY : IN STD_LOGIC;
    x_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    x_TVALID : IN STD_LOGIC;
    x_TREADY : OUT STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_fir,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.210000,HLS_SYN_LAT=189,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=5993,HLS_SYN_LUT=1197,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal y_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_start : STD_LOGIC;
    signal grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_done : STD_LOGIC;
    signal grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_idle : STD_LOGIC;
    signal grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_ready : STD_LOGIC;
    signal grp_fir_Pipeline_Shift_Accum_Loop_fu_411_x_TREADY : STD_LOGIC;
    signal grp_fir_Pipeline_Shift_Accum_Loop_fu_411_acc_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fir_Pipeline_Shift_Accum_Loop_fu_411_acc_out_ap_vld : STD_LOGIC;
    signal grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal acc_1_fu_783_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_y_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal y_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal y_TVALID_int_regslice : STD_LOGIC;
    signal y_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_y_U_vld_out : STD_LOGIC;
    signal regslice_both_x_U_apdone_blk : STD_LOGIC;
    signal x_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal x_TVALID_int_regslice : STD_LOGIC;
    signal x_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_x_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_fir_Pipeline_Shift_Accum_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_TVALID : IN STD_LOGIC;
        x_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        x_TREADY : OUT STD_LOGIC;
        acc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        acc_out_ap_vld : OUT STD_LOGIC );
    end component;


    component fir_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_fir_Pipeline_Shift_Accum_Loop_fu_411 : component fir_fir_Pipeline_Shift_Accum_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_start,
        ap_done => grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_done,
        ap_idle => grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_idle,
        ap_ready => grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_ready,
        x_TVALID => x_TVALID_int_regslice,
        x_TDATA => x_TDATA_int_regslice,
        x_TREADY => grp_fir_Pipeline_Shift_Accum_Loop_fu_411_x_TREADY,
        acc_out => grp_fir_Pipeline_Shift_Accum_Loop_fu_411_acc_out,
        acc_out_ap_vld => grp_fir_Pipeline_Shift_Accum_Loop_fu_411_acc_out_ap_vld);

    regslice_both_y_U : component fir_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => y_TDATA_int_regslice,
        vld_in => y_TVALID_int_regslice,
        ack_in => y_TREADY_int_regslice,
        data_out => y_TDATA,
        vld_out => regslice_both_y_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_U_apdone_blk);

    regslice_both_x_U : component fir_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TDATA,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_U_ack_in,
        data_out => x_TDATA_int_regslice,
        vld_out => x_TVALID_int_regslice,
        ack_out => x_TREADY_int_regslice,
        apdone_blk => regslice_both_x_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_ready = ap_const_logic_1)) then 
                    grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_done, ap_CS_fsm_state3, regslice_both_y_U_apdone_blk, y_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((y_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((y_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_y_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    acc_1_fu_783_p4 <= grp_fir_Pipeline_Shift_Accum_Loop_fu_411_acc_out(31 downto 16);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_done)
    begin
        if ((grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(y_TREADY_int_regslice)
    begin
        if ((y_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(regslice_both_y_U_apdone_blk, y_TREADY_int_regslice)
    begin
        if (((y_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_y_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state5_assign_proc : process(regslice_both_y_U_apdone_blk, y_TREADY_int_regslice)
    begin
                ap_block_state5 <= ((y_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_y_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, regslice_both_y_U_apdone_blk, y_TREADY_int_regslice)
    begin
        if ((not(((y_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_y_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_y_U_apdone_blk, y_TREADY_int_regslice)
    begin
        if ((not(((y_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_y_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_start <= grp_fir_Pipeline_Shift_Accum_Loop_fu_411_ap_start_reg;
    x_TREADY <= regslice_both_x_U_ack_in;

    x_TREADY_int_regslice_assign_proc : process(grp_fir_Pipeline_Shift_Accum_Loop_fu_411_x_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_TREADY_int_regslice <= grp_fir_Pipeline_Shift_Accum_Loop_fu_411_x_TREADY;
        else 
            x_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    y_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, y_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y_TDATA_blk_n <= y_TREADY_int_regslice;
        else 
            y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        y_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_1_fu_783_p4),32));

    y_TVALID <= regslice_both_y_U_vld_out;

    y_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state4, y_TREADY_int_regslice)
    begin
        if (((y_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y_TVALID_int_regslice <= ap_const_logic_1;
        else 
            y_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
